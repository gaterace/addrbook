// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mserviceaddrbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MServiceAddrbookClient is the client API for MServiceAddrbook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MServiceAddrbookClient interface {
	// create new party
	CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error)
	// update an existing party
	UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error)
	// delete an existing party
	DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error)
	// get party by id
	GetParty(ctx context.Context, in *GetPartyRequest, opts ...grpc.CallOption) (*GetPartyResponse, error)
	// get parties by mservice id
	GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error)
	// get party wrapper by id
	GetPartyWrapper(ctx context.Context, in *GetPartyWrapperRequest, opts ...grpc.CallOption) (*GetPartyWrapperResponse, error)
	// create a new address for a party
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error)
	// update an existing address for a party
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	// delete an existing address for a party
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error)
	// get an address for a party by id
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	// create a new  phone
	CreatePhone(ctx context.Context, in *CreatePhoneRequest, opts ...grpc.CallOption) (*CreatePhoneResponse, error)
	// update an existing phone
	UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*UpdatePhoneResponse, error)
	// delete an existing phone
	DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...grpc.CallOption) (*DeletePhoneResponse, error)
	// get a phone for a party by id
	GetPhone(ctx context.Context, in *GetPhoneRequest, opts ...grpc.CallOption) (*GetPhoneResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error)
}

type mServiceAddrbookClient struct {
	cc grpc.ClientConnInterface
}

func NewMServiceAddrbookClient(cc grpc.ClientConnInterface) MServiceAddrbookClient {
	return &mServiceAddrbookClient{cc}
}

func (c *mServiceAddrbookClient) CreateParty(ctx context.Context, in *CreatePartyRequest, opts ...grpc.CallOption) (*CreatePartyResponse, error) {
	out := new(CreatePartyResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/create_party", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) UpdateParty(ctx context.Context, in *UpdatePartyRequest, opts ...grpc.CallOption) (*UpdatePartyResponse, error) {
	out := new(UpdatePartyResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/update_party", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) DeleteParty(ctx context.Context, in *DeletePartyRequest, opts ...grpc.CallOption) (*DeletePartyResponse, error) {
	out := new(DeletePartyResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/delete_party", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) GetParty(ctx context.Context, in *GetPartyRequest, opts ...grpc.CallOption) (*GetPartyResponse, error) {
	out := new(GetPartyResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_party", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) GetParties(ctx context.Context, in *GetPartiesRequest, opts ...grpc.CallOption) (*GetPartiesResponse, error) {
	out := new(GetPartiesResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_parties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) GetPartyWrapper(ctx context.Context, in *GetPartyWrapperRequest, opts ...grpc.CallOption) (*GetPartyWrapperResponse, error) {
	out := new(GetPartyWrapperResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_party_wrapper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressResponse, error) {
	out := new(CreateAddressResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/create_address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/update_address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*DeleteAddressResponse, error) {
	out := new(DeleteAddressResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/delete_address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) CreatePhone(ctx context.Context, in *CreatePhoneRequest, opts ...grpc.CallOption) (*CreatePhoneResponse, error) {
	out := new(CreatePhoneResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/create_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) UpdatePhone(ctx context.Context, in *UpdatePhoneRequest, opts ...grpc.CallOption) (*UpdatePhoneResponse, error) {
	out := new(UpdatePhoneResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/update_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) DeletePhone(ctx context.Context, in *DeletePhoneRequest, opts ...grpc.CallOption) (*DeletePhoneResponse, error) {
	out := new(DeletePhoneResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/delete_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) GetPhone(ctx context.Context, in *GetPhoneRequest, opts ...grpc.CallOption) (*GetPhoneResponse, error) {
	out := new(GetPhoneResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_phone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mServiceAddrbookClient) GetServerVersion(ctx context.Context, in *GetServerVersionRequest, opts ...grpc.CallOption) (*GetServerVersionResponse, error) {
	out := new(GetServerVersionResponse)
	err := c.cc.Invoke(ctx, "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_server_version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MServiceAddrbookServer is the server API for MServiceAddrbook service.
// All implementations must embed UnimplementedMServiceAddrbookServer
// for forward compatibility
type MServiceAddrbookServer interface {
	// create new party
	CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error)
	// update an existing party
	UpdateParty(context.Context, *UpdatePartyRequest) (*UpdatePartyResponse, error)
	// delete an existing party
	DeleteParty(context.Context, *DeletePartyRequest) (*DeletePartyResponse, error)
	// get party by id
	GetParty(context.Context, *GetPartyRequest) (*GetPartyResponse, error)
	// get parties by mservice id
	GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error)
	// get party wrapper by id
	GetPartyWrapper(context.Context, *GetPartyWrapperRequest) (*GetPartyWrapperResponse, error)
	// create a new address for a party
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error)
	// update an existing address for a party
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error)
	// delete an existing address for a party
	DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressResponse, error)
	// get an address for a party by id
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	// create a new  phone
	CreatePhone(context.Context, *CreatePhoneRequest) (*CreatePhoneResponse, error)
	// update an existing phone
	UpdatePhone(context.Context, *UpdatePhoneRequest) (*UpdatePhoneResponse, error)
	// delete an existing phone
	DeletePhone(context.Context, *DeletePhoneRequest) (*DeletePhoneResponse, error)
	// get a phone for a party by id
	GetPhone(context.Context, *GetPhoneRequest) (*GetPhoneResponse, error)
	// get current server version and uptime - health check
	GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error)
	mustEmbedUnimplementedMServiceAddrbookServer()
}

// UnimplementedMServiceAddrbookServer must be embedded to have forward compatible implementations.
type UnimplementedMServiceAddrbookServer struct {
}

func (UnimplementedMServiceAddrbookServer) CreateParty(context.Context, *CreatePartyRequest) (*CreatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateParty not implemented")
}
func (UnimplementedMServiceAddrbookServer) UpdateParty(context.Context, *UpdatePartyRequest) (*UpdatePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParty not implemented")
}
func (UnimplementedMServiceAddrbookServer) DeleteParty(context.Context, *DeletePartyRequest) (*DeletePartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteParty not implemented")
}
func (UnimplementedMServiceAddrbookServer) GetParty(context.Context, *GetPartyRequest) (*GetPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParty not implemented")
}
func (UnimplementedMServiceAddrbookServer) GetParties(context.Context, *GetPartiesRequest) (*GetPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParties not implemented")
}
func (UnimplementedMServiceAddrbookServer) GetPartyWrapper(context.Context, *GetPartyWrapperRequest) (*GetPartyWrapperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartyWrapper not implemented")
}
func (UnimplementedMServiceAddrbookServer) CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedMServiceAddrbookServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedMServiceAddrbookServer) DeleteAddress(context.Context, *DeleteAddressRequest) (*DeleteAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedMServiceAddrbookServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedMServiceAddrbookServer) CreatePhone(context.Context, *CreatePhoneRequest) (*CreatePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhone not implemented")
}
func (UnimplementedMServiceAddrbookServer) UpdatePhone(context.Context, *UpdatePhoneRequest) (*UpdatePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhone not implemented")
}
func (UnimplementedMServiceAddrbookServer) DeletePhone(context.Context, *DeletePhoneRequest) (*DeletePhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePhone not implemented")
}
func (UnimplementedMServiceAddrbookServer) GetPhone(context.Context, *GetPhoneRequest) (*GetPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPhone not implemented")
}
func (UnimplementedMServiceAddrbookServer) GetServerVersion(context.Context, *GetServerVersionRequest) (*GetServerVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerVersion not implemented")
}
func (UnimplementedMServiceAddrbookServer) mustEmbedUnimplementedMServiceAddrbookServer() {}

// UnsafeMServiceAddrbookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MServiceAddrbookServer will
// result in compilation errors.
type UnsafeMServiceAddrbookServer interface {
	mustEmbedUnimplementedMServiceAddrbookServer()
}

func RegisterMServiceAddrbookServer(s grpc.ServiceRegistrar, srv MServiceAddrbookServer) {
	s.RegisterService(&_MServiceAddrbook_serviceDesc, srv)
}

func _MServiceAddrbook_CreateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).CreateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/create_party",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).CreateParty(ctx, req.(*CreatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_UpdateParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).UpdateParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/update_party",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).UpdateParty(ctx, req.(*UpdatePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_DeleteParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).DeleteParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/delete_party",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).DeleteParty(ctx, req.(*DeletePartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_GetParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).GetParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_party",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).GetParty(ctx, req.(*GetPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_GetParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).GetParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_parties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).GetParties(ctx, req.(*GetPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_GetPartyWrapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartyWrapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).GetPartyWrapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_party_wrapper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).GetPartyWrapper(ctx, req.(*GetPartyWrapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/create_address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/update_address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/delete_address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_CreatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).CreatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/create_phone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).CreatePhone(ctx, req.(*CreatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_UpdatePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).UpdatePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/update_phone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).UpdatePhone(ctx, req.(*UpdatePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_DeletePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).DeletePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/delete_phone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).DeletePhone(ctx, req.(*DeletePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_GetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).GetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_phone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).GetPhone(ctx, req.(*GetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MServiceAddrbook_GetServerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MServiceAddrbookServer).GetServerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.gaterace.mservice.addrbook.MServiceAddrbook/get_server_version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MServiceAddrbookServer).GetServerVersion(ctx, req.(*GetServerVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MServiceAddrbook_serviceDesc = grpc.ServiceDesc{
	ServiceName: "org.gaterace.mservice.addrbook.MServiceAddrbook",
	HandlerType: (*MServiceAddrbookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create_party",
			Handler:    _MServiceAddrbook_CreateParty_Handler,
		},
		{
			MethodName: "update_party",
			Handler:    _MServiceAddrbook_UpdateParty_Handler,
		},
		{
			MethodName: "delete_party",
			Handler:    _MServiceAddrbook_DeleteParty_Handler,
		},
		{
			MethodName: "get_party",
			Handler:    _MServiceAddrbook_GetParty_Handler,
		},
		{
			MethodName: "get_parties",
			Handler:    _MServiceAddrbook_GetParties_Handler,
		},
		{
			MethodName: "get_party_wrapper",
			Handler:    _MServiceAddrbook_GetPartyWrapper_Handler,
		},
		{
			MethodName: "create_address",
			Handler:    _MServiceAddrbook_CreateAddress_Handler,
		},
		{
			MethodName: "update_address",
			Handler:    _MServiceAddrbook_UpdateAddress_Handler,
		},
		{
			MethodName: "delete_address",
			Handler:    _MServiceAddrbook_DeleteAddress_Handler,
		},
		{
			MethodName: "get_address",
			Handler:    _MServiceAddrbook_GetAddress_Handler,
		},
		{
			MethodName: "create_phone",
			Handler:    _MServiceAddrbook_CreatePhone_Handler,
		},
		{
			MethodName: "update_phone",
			Handler:    _MServiceAddrbook_UpdatePhone_Handler,
		},
		{
			MethodName: "delete_phone",
			Handler:    _MServiceAddrbook_DeletePhone_Handler,
		},
		{
			MethodName: "get_phone",
			Handler:    _MServiceAddrbook_GetPhone_Handler,
		},
		{
			MethodName: "get_server_version",
			Handler:    _MServiceAddrbook_GetServerVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "MServiceAddrbook.proto",
}
